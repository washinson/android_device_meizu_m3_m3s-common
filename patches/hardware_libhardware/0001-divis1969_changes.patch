diff --git a/include/hardware/audio.h b/include/hardware/audio.h
index c3cb740..02372f5 100644
--- a/include/hardware/audio.h
+++ b/include/hardware/audio.h
@@ -753,6 +753,12 @@ struct audio_hw_device {
     int (*listen_set_parameters)(struct audio_hw_device *dev,
                                  const char *kv_pairs);
 #endif
+    int (*dummy1)(void);
+    int (*dummy2)(void);
+    int (*dummy3)(void);
+    int (*dummy4)(void);
+    int (*set_audio_data)(struct audio_hw_device *dev, int par1, size_t len, void *ptr);
+    int (*get_audio_data)(struct audio_hw_device *dev, int par1, size_t len, void *ptr);
 };
 typedef struct audio_hw_device audio_hw_device_t;
 
diff --git a/include/hardware/bluetooth.h b/include/hardware/bluetooth.h
index 5eb8c32..07bf29c 100644
--- a/include/hardware/bluetooth.h
+++ b/include/hardware/bluetooth.h
@@ -483,7 +483,7 @@ typedef struct {
     int (*init)(bt_callbacks_t* callbacks );
 
     /*adds callbacks for QC related calls to the btif env*/
-    int (*initq)(bt_callbacks_t* callbacks);
+    //int (*initq)(bt_callbacks_t* callbacks);
 
     /** Enable Bluetooth. */
     int (*enable)(bool guest_mode);
@@ -495,7 +495,7 @@ typedef struct {
     void (*cleanup)(void);
 
     /** SSR cleanup. */
-    void (*ssrcleanup)(void);
+    //void (*ssrcleanup)(void);
 
     /** Get all Bluetooth Adapter properties at init */
     int (*get_adapter_properties)(void);
diff --git a/include/hardware/bt_hf.h b/include/hardware/bt_hf.h
index 15c26e9..ee90f75 100644
--- a/include/hardware/bt_hf.h
+++ b/include/hardware/bt_hf.h
@@ -232,7 +232,7 @@ typedef struct {
     bt_status_t (*init)( bthf_callbacks_t* callbacks, int max_hf_clients);
 
     /** Set the feature bitmask */
-    bt_status_t (*init_features)( int feature_bitmask );
+    //bt_status_t (*init_features)( int feature_bitmask );
 
     /** connect to headset */
     bt_status_t (*connect)( bt_bdaddr_t *bd_addr );
@@ -295,7 +295,7 @@ typedef struct {
                                        const char *number, bthf_call_addrtype_t type);
 
     /** get remote supported features */
-    int (*get_remote_features)(bt_bdaddr_t *bd_addr);
+    //int (*get_remote_features)(bt_bdaddr_t *bd_addr);
 
     /** Closes the interface. */
     void  (*cleanup)( void );
diff --git a/include/hardware/bt_sock.h b/include/hardware/bt_sock.h
index bae41f4..4f341bf 100644
--- a/include/hardware/bt_sock.h
+++ b/include/hardware/bt_sock.h
@@ -62,11 +62,11 @@ typedef struct {
     /*
      * get socket option of rfcomm channel socket.
      */
-    bt_status_t (*get_sock_opt)(btsock_type_t type, int channel, btsock_option_type_t option_name, void *option_value, int *option_len);
+    //bt_status_t (*get_sock_opt)(btsock_type_t type, int channel, btsock_option_type_t option_name, void *option_value, int *option_len);
     /*
      * set socket option of rfcomm channel socket.
      */
-    bt_status_t (*set_sock_opt)(btsock_type_t type, int channel, btsock_option_type_t option_name, void *option_value, int option_len);
+    //bt_status_t (*set_sock_opt)(btsock_type_t type, int channel, btsock_option_type_t option_name, void *option_value, int option_len);
 
 
 } btsock_interface_t;
diff --git a/include/hardware/gps.h b/include/hardware/gps.h
index fb1f669..580d5a4 100644
--- a/include/hardware/gps.h
+++ b/include/hardware/gps.h
@@ -37,6 +37,9 @@ __BEGIN_DECLS
 /** Milliseconds since January 1, 1970 */
 typedef int64_t GpsUtcTime;
 
+/** Maximum number of GNSS SVs for gps_sv_status_callback(). */
+#define GNSS_MAX_SVS 256
+
 /** Maximum number of SVs for gps_sv_status_callback(). */
 #define GPS_MAX_SVS 32
 
@@ -482,6 +485,33 @@ typedef struct {
     float   azimuth;
 } GpsSvInfo;
 
+
+/** Represents GNSS SV information. */
+typedef struct {
+    /** set to sizeof(GnssSvInfo) */
+    size_t          size;
+    /** Pseudo-random number for the SV. */
+    int     prn;
+    /** Signal to noise ratio. */
+    float   snr;
+    /** Elevation of SV in degrees. */
+    float   elevation;
+    /** Azimuth of SV in degrees. */
+    float   azimuth;
+    /**
+     * SVs have ephemeris data.
+     */
+    bool has_ephemeris;
+    /**
+     * SVs have almanac data.
+     */
+    bool has_almanac;
+    /**
+     * SVs were used for computing the most recent position fix.
+     */
+    bool used_in_fix;
+} GnssSvInfo;
+
 /** Represents SV status. */
 typedef struct {
     /** set to sizeof(GpsSvStatus) */
@@ -511,6 +541,18 @@ typedef struct {
 } GpsSvStatus;
 
 
+/** Represents GNSS SV status. */
+typedef struct {
+    /** set to sizeof(GnssSvStatus) */
+    size_t          size;
+
+    /** Number of SVs currently visible. */
+    int         num_svs;
+
+    /** Contains an array of GNSS SV information. */
+    GnssSvInfo   sv_list[GNSS_MAX_SVS];
+} GnssSvStatus;
+
 /* 2G and 3G */
 /* In 3G lac is discarded */
 typedef struct {
@@ -550,6 +592,12 @@ typedef void (* gps_status_callback)(GpsStatus* status);
  */
 typedef void (* gps_sv_status_callback)(GpsSvStatus* sv_info);
 
+/**
+ * Callback with GNSS SV status information.
+ * Can only be called from a thread created by create_thread_cb.
+ */
+typedef void (* gnss_sv_status_callback)(GnssSvStatus* sv_info);
+
 /** Callback for reporting NMEA sentences.
  *  Can only be called from a thread created by create_thread_cb.
  */
@@ -583,6 +631,7 @@ typedef struct {
     gps_location_callback location_cb;
     gps_status_callback status_cb;
     gps_sv_status_callback sv_status_cb;
+    gnss_sv_status_callback gnss_sv_status_cb;
     gps_nmea_callback nmea_cb;
     gps_set_capabilities set_capabilities_cb;
     gps_acquire_wakelock acquire_wakelock_cb;
